#!/bin/bash

### steps ###
# verify the system has cmake, make, gcc installed and updated
# verify the system has cuda-capable gpu
# verify that cmake is installed and compatible
# critically resolve the issues going through the cmake logs
# important libraries are: MPI library, CUDA SDK, FFTW and FLTK

# verify the system has cmake, make, gcc installed and updated
> make --v
GNU Make 4.3
> gcc --version
gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
> cmake --v
cmake is not installed, install cmake latest using snap
>snap install cmake --classic
cmake 3.31.5 from Crascit✓ installed

# verify the system has cuda-capable gpu
>nvidia-smi
#log
Mon Feb 17 14:55:21 2025
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 570.86.16              Driver Version: 572.16         CUDA Version: 12.8     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA GeForce RTX 3060 Ti     On  |   00000000:04:00.0 Off |                  N/A |
|  0%   34C    P8             11W /  200W |      15MiB /   8192MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+

+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|    0   N/A  N/A              31      G   /Xwayland                             N/A      |
+-----------------------------------------------------------------------------------------+
# check cuda runtime/compiler version is 11.8
>nvcc -V
# Log
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2022 NVIDIA Corporation
Built on Wed_Sep_21_10:33:58_PDT_2022
Cuda compilation tools, release 11.8, V11.8.89
Build cuda_11.8.r11.8/compiler.31833905_0

# verify open mpi is installed
>ompi_info
# install open MPI
>sudo apt-get update && sudo apt-get upgrade
>sudo apt autoclean && sudo apt autoremove
# Install ssh server and client with commands:
>sudo apt-get install openssh-server && sudo apt-get install openssh-client
# Install net-tools for cheking ip address (with command:ifconfig)
>sudo apt-get install net-tools
>ifconfig
# open mpi
>sudo apt-get install libopenmpi-dev
>sudo apt-get install openmpi-bin openmpi-common libopenmpi-dev libgtk2.0-dev
>sudo apt-get install librdmacm-dev libpsm2-dev
# check mpi installation and version
>source ~/.bashrc
>mpirun --version
mpirun (Open MPI) 4.1.6

# modify hostfile, which OpenMPI uses to determine which hosts (computers) are available to run MPI processes. 
the file is in the /etc/ location
>ll /etc/openmpi/openmpi-default-hostfile
>cd /etc/openmpi/
You can use the following commands to configure hostfile.txt for local development:
>mv openmpi-default-hostfile ORIGopenmpi-default-hostfile.txt
>echo "localhost slots=4 max-slots=4" >openmpi-default-hostfile
This will allow you to run your MPI programs with up to 4 processes.
Depending on your CPU and (if relevant) how you’ve configured your virtual machine software, 
the degree of parallelism you’ll see could vary. However, even without real parallelism, 
you will be able to test your program to see if the communication between processes works correctly, 
which is generally one of the challenging aspects of using MPI.
The file ORIG**.txt is a backup of the original hostfile

# Validates installation
>mkdir /home/mpitest
>cd /home/mpitest
>wget https://lsi2.ugr.es/jmantas/ppr/tutoriales/codigos/mpi/holamundo2.cpp -O 1_HolaMundo.cpp
>mpiCC 1_HolaMundo.cpp -o holaMundo
>mpirun -np 4 holaMundo
¡Hola Mundo desde el proceso 2 de 4 que somos!
¡Hola Mundo desde el proceso 3 de 4 que somos!
¡Hola Mundo desde el proceso 0 de 4 que somos!
¡Hola Mundo desde el proceso 1 de 4 que somos!

# install accessories packages
* ghostscript
>apt-get install ghostscript
* libtiff (assuming g++ already available in the system)
* Install the libraries libTIFF relies upon
>sudo apt-get install libjpeg-dev liblzma-dev liblz-dev zlib1g-dev
* Next, create a installation folder and download the latest version of libTIFF
>mkdir installation_directory
>wget http://download.osgeo.org/libtiff/tiff-4.0.10.tar.gz
>tar -zxvf tiff-4.0.10.tar.gz
>cd tiff-4.0.10
>./configure
>make
* install libTIFF
>sudo make install
create links for the libTIFF package
>sudo ldconfig
* verify libTIFF
>tiffinfo

* Get libpng (in case of download fails, go to http://downloads.sourceforge.net/libpng/ to get updated download link)
>wget http://prdownloads.sourceforge.net/libpng/libpng-1.6.46.tar.gz
>tar -xvf libpng-1.6.46.tar.gz
>cd libpng-1.6.46/
>./configure --prefix=/usr/local/libpng
>make
>sudo make install

* Install all the packages using relion's manual instruction & keep track of suggested packages in the log
>sudo apt install cmake git build-essential mpi-default-bin mpi-default-dev libfftw3-dev libtiff-dev libpng-dev ghostscript libxft-dev
* Install the suggested packages from the log
>sudo apt install cmake-doc cmake-format elpa-cmake-mode ninja-build lrzip libfftw3-doc

# Install conda by installing miniforge 
* Download miniforge linux version from https://conda-forge.org/download/ and cd to that dir
>bash Miniforge..
>source ~/.bashrc
* check conda version
>conda --version
* check conda directory
>which conda

* Initialization can be done by calling conda with its full path, with something like (ref:https://github.com/conda-forge/miniforge)
>~/miniforge3/bin/conda init
* Activate the env
>micromamba activate /home/rkarim/miniforge3
* If you'd prefer that conda's base environment not be activated on startup, run the following command when conda is activated:
>conda config --set auto_activate_base false
* Deactivate the env run
>micromamba deactivate /home/rkarim/miniforge3

# Download and install relion
>git clone https://github.com/3dem/relion.git
>cd relion
>git checkout ver5.0
>git pull

* Set up conda env
Once you have conda setup, you can install all the RELION Python dependencies into a new environment by running:
>conda env create -f environment.yml
build dir was already there
>cd build
>cmake ..

# cmake configuration log
CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- The C compiler identification is GNU 13.3.0
-- The CXX compiler identification is GNU 13.3.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- BUILD TYPE set to the default type:  'Release'
-- Setting fallback CUDA_ARCH=50
-- CUDA enabled - Building CUDA-accelerated version of RELION
-- Setting cpu precision to double
-- Setting accelerated code precision to single
CMake Warning (dev) at CMakeLists.txt:192 (FIND_PACKAGE):
  Policy CMP0146 is not set: The FindCUDA module is removed.  Run "cmake
  --help-policy CMP0146" for policy details.  Use the cmake_policy command to
  set the policy and suppress this warning.

This warning is for project developers.  Use -Wno-dev to suppress it.

-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Found CUDA: /usr/local/cuda-11.8 (found version "11.8")
-- Using cuda wrapper to compile....
-- Cuda version is >= 7.5 and single-precision build, enable double usage warning.
-- Found MPI_C: /usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi.so (found version "3.1")
-- Found MPI_CXX: /usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi_cxx.so (found version "3.1")
-- Found MPI: TRUE (found version "3.1")
-- MPI_INCLUDE_PATH : /usr/lib/x86_64-linux-gnu/openmpi/include;/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi
-- MPI_LIBRARIES : /usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi_cxx.so;/usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi.so
-- MPI_CXX_INCLUDE_PATH : /usr/lib/x86_64-linux-gnu/openmpi/include;/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi
-- MPI_CXX_LIBRARIES : /usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi_cxx.so;/usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi.so
-- CMAKE_C_COMPILER : /usr/bin/cc
-- CMAKE_CXX_COMPILER : /usr/bin/c++
-- MPI_C_COMPILER : /usr/bin/mpicc
-- MPI_CXX_COMPILER : /usr/bin/mpicxx
-- Found OpenMP_C: -fopenmp (found version "4.5")
-- Found OpenMP_CXX: -fopenmp (found version "4.5")
-- Found OpenMP: TRUE (found version "4.5")
-- CMAKE_CXX_COMPILER_ID : GNU
-- Found X11: /usr/include
-- Looking for XOpenDisplay in /usr/lib/x86_64-linux-gnu/libX11.so;/usr/lib/x86_64-linux-gnu/libXext.so
-- Looking for XOpenDisplay in /usr/lib/x86_64-linux-gnu/libX11.so;/usr/lib/x86_64-linux-gnu/libXext.so - found
-- Looking for gethostbyname
-- Looking for gethostbyname - found
-- Looking for connect
-- Looking for connect - found
-- Looking for remove
-- Looking for remove - found
-- Looking for shmat
-- Looking for shmat - found
-- Looking for IceConnectionNumber in ICE
-- Looking for IceConnectionNumber in ICE - found
-- Could NOT find FLTK (missing: FLTK_LIBRARIES FLTK_INCLUDE_DIR)
-- No FLTK installation was found
-- --------------------------------------------------------
-- -------- NO EXISTING FLTK LIBRARIES WHERE FOUND. -------
-- -------------- FLTK WILL BE DOWNLOADED AND -------------
-- --------------- BUILT DURING COMPILE-TIME. -------------
-- --------------------------------------------------------
-- ---- A WORKING INTERNET CONNECTION WILL BE REQUIRED. ---
-- --------------------------------------------------------
-- no previous fltk found, the following paths are set for libs/headers TO BE built
CMake Warning (dev) at /usr/share/cmake-3.28/Modules/ExternalProject.cmake:3195 (message):
  The DOWNLOAD_EXTRACT_TIMESTAMP option was not given and policy CMP0135 is
  not set.  The policy's OLD behavior will be used.  When using a URL
  download, the timestamps of extracted files should preferably be that of
  the time of extraction, otherwise code that depends on the extracted
  contents might not be rebuilt if the URL changes.  The OLD behavior
  preserves the timestamps from the archive instead, but this is usually not
  what you want.  Update your project to the NEW behavior or specify the
  DOWNLOAD_EXTRACT_TIMESTAMP option with a value of true to avoid this
  robustness issue.
Call Stack (most recent call first):
  /usr/share/cmake-3.28/Modules/ExternalProject.cmake:4418 (_ep_add_download_command)
  cmake/BuildFLTK.cmake:47 (externalproject_add)
  CMakeLists.txt:474 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- FLTK_INCLUDE_DIR: /mnt/c/Linux_folder/relion/relion/external/fltk/include
-- FLTK_LIBRARIES:   /mnt/c/Linux_folder/relion/relion/external/fltk/lib/libfltk.so
-- Found FFTW
-- FFTW_PATH: /usr/include
-- FFTW_INCLUDES: /usr/include
-- FFTW_LIBRARIES: /usr/lib/x86_64-linux-gnu/libfftw3f.so;/usr/lib/x86_64-linux-gnu/libfftw3.so
-- Looking for sincos
-- Looking for sincos - found
-- Looking for __sincos
-- Looking for __sincos - not found
-- Found TIFF: /usr/local/lib/libtiff.so (found version "4.0.10")
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version "1.3")
-- Found PNG: /usr/lib/x86_64-linux-gnu/libpng.so (found version "1.6.43")
-- Found JPEG: /usr/lib/x86_64-linux-gnu/libjpeg.so (found version "80")
-- Will try to find Conda environment (name: relion-5.0) and its Python executable...
-- Found Conda executable: /home/rkarim/miniforge3/condabin/conda
-- Found Conda environment (name: relion-5.0) and its Python executable.
-- Using Python executable: /home/rkarim/miniforge3/envs/relion-5.0/bin/python
-- Will try to find Torch home directory...
CMake Warning at cmake/FindCondaPython.cmake:102 (message):
  Could NOT find Torch home directory for Conda environment (name:
  relion-5.0).

  You can specify it directly with -DTORCH_HOME_PATH=<path>

Call Stack (most recent call first):
  CMakeLists.txt:545 (include)


-- Using Torch home:
-- Will attempts to download model weights for dependent packages...
NOTE: You can skip this step by setting -DFETCH_WEIGHTS=OFF
Attempting to download weights for class ranker...
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/relion_classranker/command_line.py", line 101, in main
    model, model_path = install_and_load_model(
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/relion_classranker/command_line.py", line 53, in install_and_load_model
    torch.hub.download_url_to_file(model_list[name][0], model_path_gz, hash_prefix=model_list[name][1])
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/torch/hub.py", line 611, in download_url_to_file
    u = urlopen(req)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 525, in open
    response = meth(req, response)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 634, in http_response
    response = self.parent.error(
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 563, in error
    return self._call_chain(*args)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 496, in _call_chain
    result = func(*args)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 643, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 503: Service Unavailable
Installing Classranker model (v1.0)...

---------------------------------- PYTHON ERROR ---------------------------------
   Has RELION been provided a Python interpreter with the correct environment?
   The interpreter can be passed to RELION either during Cmake configuration by
     using the Cmake flag -DPYTHON_EXE_PATH=<path/to/python/interpreter>.
   NOTE: For some modules TORCH_HOME needs to be set to find pretrained models
---------------------------------------------------------------------------------

  Using python executable: /home/rkarim/miniforge3/envs/relion-5.0/bin/python

Attempting to download weights for Blush...
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/relion_blush/command_line.py", line 276, in main
    model, model_path = install_and_load_model(
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/relion_blush/util.py", line 822, in install_and_load_model
    torch.hub.download_url_to_file(source_url, model_path_gz, hash_prefix=model_list[name][1])
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/torch/hub.py", line 611, in download_url_to_file
    u = urlopen(req)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 525, in open
    response = meth(req, response)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 634, in http_response
    response = self.parent.error(
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 563, in error
    return self._call_chain(*args)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 496, in _call_chain
    result = func(*args)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 643, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 503: Service Unavailable
Installing Blush model (v1.0)...
Downloading model weights from:
   https://zenodo.org/records/10072731/files/blush_v1.0.ckpt.gz

---------------------------------- PYTHON ERROR ---------------------------------
   Has RELION been provided a Python interpreter with the correct environment?
   The interpreter can be passed to RELION either during Cmake configuration by
     using the Cmake flag -DPYTHON_EXE_PATH=<path/to/python/interpreter>.
   NOTE: For some modules TORCH_HOME needs to be set to find pretrained models
---------------------------------------------------------------------------------

  Using python executable: /home/rkarim/miniforge3/envs/relion-5.0/bin/python

Attempting to download weights for ModelAngelo...
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/model_angelo/__main__.py", line 58, in main
    args.func(args)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/model_angelo/utils/setup_weights.py", line 28, in main
    model_dst = download_and_install_model(parsed_args.bundle_name)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/model_angelo/utils/torch_utils.py", line 456, in download_and_install_model
    torch.hub.download_url_to_file(bundle_name_to_link[bundle_name], dest + ".zip")
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/site-packages/torch/hub.py", line 611, in download_url_to_file
    u = urlopen(req)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 525, in open
    response = meth(req, response)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 634, in http_response
    response = self.parent.error(
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 563, in error
    return self._call_chain(*args)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 496, in _call_chain
    result = func(*args)
  File "/home/rkarim/miniforge3/envs/relion-5.0/lib/python3.10/urllib/request.py", line 643, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 503: Service Unavailable
Please make sure you have set the environment variable TORCH_HOME
to a suitable directory, visible to all relevant users!
Setting up bundle with name: nucleotides for the first time.

---------------------------------- PYTHON ERROR ---------------------------------
   Has RELION been provided a Python interpreter with the correct environment?
   The interpreter can be passed to RELION either during Cmake configuration by
     using the Cmake flag -DPYTHON_EXE_PATH=<path/to/python/interpreter>.
   NOTE: For some modules TORCH_HOME needs to be set to find pretrained models
---------------------------------------------------------------------------------

  Using python executable: /home/rkarim/miniforge3/envs/relion-5.0/bin/python

One or more download tasks failed. See above error messages.
CMake Warning at CMakeLists.txt:590 (message):
  Failed to download model weights.  YOU CAN IGNORE THIS.  The downloads will
  be attempted again when the model weights are required later.

  NOTE: You can skip this step by setting -DFETCH_WEIGHTS=OFF


-- Building static libs (larger build size and binaries)
Running apps/CMakeLists.txt...
-- CMAKE_BINARY_DIR:/mnt/c/Linux_folder/relion/relion/build
-- Git commit ID: e62d3ba8b14e9f6f146435e9b74410f698223134
-- CMAKE_C_FLAGS : -std=c99  -fopenmp
-- CMAKE_CXX_FLAGS : -fPIC -std=c++14  -fopenmp
-- Configuring done (27.9s)
-- Generating done (6.9s)
-- Build files have been written to: /mnt/c/Linux_folder/relion/relion/build

# Addressing the errors or package needs
* fltk package
>git clone https://github.com/fltk/fltk.git
>cd fltk
>git pull
>make

* 







